name: Build All Platforms

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64
            use-cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows-x64
          # Windows ARM64 is not well supported, commenting out for now
          # - os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   platform: windows-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: choco install openssl.light -y

      - name: Configure OpenSSL env (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $root = 'C:\\Program Files\\OpenSSL-Win64'
          if (-not (Test-Path $root)) { throw "OpenSSL not found at $root" }
          echo "OPENSSL_NO_VENDOR=1"               >> $env:GITHUB_ENV
          echo "OPENSSL_DIR=$root"                 >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$root\\lib"       >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$root\\include" >> $env:GITHUB_ENV
          
      - name: Install cross-compilation tools
        if: matrix.use-cross
        run: cargo install cross
      
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
      
      - name: Build Rust binaries (Windows)
        if: runner.os == 'Windows'
        env:
          LIBSQLITE3_SYS_USE_PKG_CONFIG: 0
          LIBZ_SYS_STATIC: 1
          # OPENSSL_* are taken from GITHUB_ENV (OPENSSL_NO_VENDOR=1, DIR, LIB/INCLUDE)
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Build Rust binaries (non-Windows)
        if: runner.os != 'Windows'
        env:
          OPENSSL_STATIC: 1
          DEP_OPENSSL_VENDORED: 1
          OPENSSL_VENDORED: 1
          OPENSSL_NO_VENDOR: 0
          LIBSQLITE3_SYS_USE_PKG_CONFIG: 0
          LIBZ_SYS_STATIC: 1
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Package binaries
        run: |
          mkdir -p npx-cli/dist/${{ matrix.platform }}
          
          # Determine binary extension
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXT=".exe"
          else
            EXT=""
          fi
          
          # Package main binary
          cp target/${{ matrix.target }}/release/server${EXT} automagik-forge${EXT}
          zip automagik-forge.zip automagik-forge${EXT}
          mv automagik-forge.zip npx-cli/dist/${{ matrix.platform }}/
          rm automagik-forge${EXT}
          
          # Package MCP binary
          cp target/${{ matrix.target }}/release/mcp_task_server${EXT} automagik-forge-mcp${EXT}
          zip automagik-forge-mcp.zip automagik-forge-mcp${EXT}
          mv automagik-forge-mcp.zip npx-cli/dist/${{ matrix.platform }}/
          rm automagik-forge-mcp${EXT}
        shell: bash
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}
          path: npx-cli/dist/${{ matrix.platform }}/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: npx-cli/dist/
          pattern: binaries-*
          merge-multiple: false
      
      - name: Reorganize artifacts
        run: |
          cd npx-cli/dist
          for dir in binaries-*; do
            platform=${dir#binaries-}
            mv $dir/* $platform/ 2>/dev/null || true
            rmdir $dir
          done
          ls -la *
      
      - name: Publish to NPM
        run: |
          cd npx-cli
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}