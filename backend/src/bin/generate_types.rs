use std::env;
use std::path::Path;
use ts_rs::TS;

// Import all the types we want to export using the library crate

fn main() {
    let shared_path = Path::new("../shared");

    // Create the shared directory if it doesn't exist
    std::fs::create_dir_all(shared_path).unwrap();

    println!("Generating TypeScript types...");

    // Set environment variable to configure ts-rs output directory
    env::set_var("TS_RS_EXPORT_DIR", shared_path.to_str().unwrap());

    // // Export TypeScript types for each struct using ts-rs export functionality
    // bloop_backend::models::ApiResponse::<()>::export().unwrap();
    // bloop_backend::models::Project::export().unwrap();
    // bloop_backend::models::CreateProject::export().unwrap();
    // bloop_backend::models::UpdateProject::export().unwrap();
    // bloop_backend::models::CreateUser::export().unwrap();
    // bloop_backend::models::UpdateUser::export().unwrap();
    // bloop_backend::models::LoginRequest::export().unwrap();
    // bloop_backend::models::LoginResponse::export().unwrap();
    // bloop_backend::models::UserResponse::export().unwrap();

    // Generate consolidated types.ts file with exports
    let mut content = String::from("// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.\n");
    content.push_str("// Auto-generated from Rust backend types using ts-rs\n\n");
    
    // Add all type declarations with export
    content.push_str(&format!("export {};\n\n", bloop_backend::models::ApiResponse::<()>::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::git_credential::GitProvider::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::git_credential::GitCredentialType::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::git_credential::GitCredentialResponse::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::git_credential::CreateGitCredential::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::project::CreateProject::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::project::Project::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::project::UpdateProject::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::task::CreateTask::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::task::Task::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::task::TaskStatus::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::task::UpdateTask::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::user::CreateUser::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::user::LoginRequest::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::user::LoginResponse::decl()));
    content.push_str(&format!("export {};\n\n", bloop_backend::models::user::UpdateUser::decl()));
    content.push_str(&format!("export {};\n", bloop_backend::models::user::UserResponse::decl()));
    
    let consolidated_content = content;

    std::fs::write(shared_path.join("types.ts"), consolidated_content).unwrap();

    println!("TypeScript types generated successfully in ../shared/");
}
