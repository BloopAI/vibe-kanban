CREATE EXTENSION IF NOT EXISTS pgcrypto;

DO $$ BEGIN
    CREATE TYPE org_member_role AS ENUM ('admin', 'member');
EXCEPTION
    WHEN duplicate_object THEN NULL;
END $$;


CREATE TABLE IF NOT EXISTS organizations (
    id         UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name       TEXT NOT NULL,
    slug       TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS users (
    id           UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email        TEXT NOT NULL UNIQUE,
    display_name TEXT NOT NULL,
    created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS organization_members (
    id               UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id  UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    user_id          UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role             org_member_role NOT NULL DEFAULT 'member',
    status           TEXT NOT NULL DEFAULT 'active',
    joined_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    last_seen_at     TIMESTAMPTZ,
    UNIQUE (organization_id, user_id),
    UNIQUE (id, organization_id)
);

CREATE INDEX IF NOT EXISTS idx_org_members_org_role
    ON organization_members (organization_id, role);

CREATE INDEX IF NOT EXISTS idx_org_members_user
    ON organization_members (user_id);

CREATE TABLE IF NOT EXISTS tasks (
    id                   UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id      UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    creator_member_id    UUID REFERENCES organization_members(id) ON DELETE SET NULL,
    assignee_member_id   UUID REFERENCES organization_members(id) ON DELETE SET NULL,
    title                TEXT NOT NULL,
    description          TEXT NOT NULL DEFAULT '',
    status               TEXT NOT NULL DEFAULT 'todo',
    shared               BOOLEAN NOT NULL DEFAULT TRUE,
    shared_at            TIMESTAMPTZ DEFAULT NOW(),
    version              BIGINT NOT NULL DEFAULT 1,
    created_at           TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at           TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT tasks_creator_org_fk
        FOREIGN KEY (creator_member_id, organization_id)
        REFERENCES organization_members(id, organization_id)
        ON DELETE SET NULL,
    CONSTRAINT tasks_assignee_org_fk
        FOREIGN KEY (assignee_member_id, organization_id)
        REFERENCES organization_members(id, organization_id)
        ON DELETE SET NULL
);

CREATE INDEX IF NOT EXISTS idx_tasks_org_status
    ON tasks (organization_id, status)
    WHERE shared IS TRUE;

CREATE INDEX IF NOT EXISTS idx_tasks_org_assignee
    ON tasks (organization_id, assignee_member_id)
    WHERE shared IS TRUE;


CREATE TABLE IF NOT EXISTS activity (
    seq                BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id           UUID NOT NULL DEFAULT gen_random_uuid(),
    organization_id    UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    task_id            UUID NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
    actor_member_id    UUID REFERENCES organization_members(id) ON DELETE SET NULL,
    assignee_member_id UUID REFERENCES organization_members(id) ON DELETE SET NULL,
    task_version       BIGINT,
    event_type         TEXT NOT NULL,
    payload            JSONB NOT NULL,
    created_at         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (event_id)
);

CREATE INDEX IF NOT EXISTS idx_activity_org_seq
    ON activity (organization_id, seq DESC);

DO $$ BEGIN
    DROP TRIGGER IF EXISTS trg_task_activity_notify ON activity;
EXCEPTION
    WHEN undefined_object THEN NULL;
END $$;

DO $$ BEGIN
    DROP FUNCTION IF EXISTS task_activity_notify();
EXCEPTION
    WHEN undefined_function THEN NULL;
END $$;

CREATE OR REPLACE FUNCTION activity_notify() RETURNS trigger AS $$
BEGIN
    PERFORM pg_notify(
        'activity',
        json_build_object(
            'seq', NEW.seq,
            'event_id', NEW.event_id,
            'organization_id', NEW.organization_id,
            'task_id', NEW.task_id,
            'event_type', NEW.event_type,
            'task_version', NEW.task_version,
            'created_at', NEW.created_at
        )::text
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER trg_activity_notify
    AFTER INSERT ON activity
    FOR EACH ROW
    EXECUTE FUNCTION activity_notify();
