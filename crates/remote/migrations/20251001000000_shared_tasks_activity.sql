CREATE EXTENSION IF NOT EXISTS pgcrypto;


CREATE TABLE IF NOT EXISTS organizations (
    id         TEXT PRIMARY KEY,
    slug       TEXT NOT NULL UNIQUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS users (
    id           TEXT PRIMARY KEY,
    email        TEXT NOT NULL UNIQUE,
    display_name TEXT NOT NULL,
    created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at   TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS organization_member_metadata (
        organization_id TEXT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
        user_id         TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        status          TEXT NOT NULL DEFAULT 'active',
        joined_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        last_seen_at    TIMESTAMPTZ,
        PRIMARY KEY (organization_id, user_id)
    );

CREATE INDEX IF NOT EXISTS idx_member_metadata_user
    ON organization_member_metadata (user_id);

DO $$
BEGIN
    CREATE TYPE task_status AS ENUM ('todo', 'in-progress', 'in-review', 'done', 'cancelled');
EXCEPTION
    WHEN duplicate_object THEN NULL;
END
$$;

CREATE TABLE IF NOT EXISTS projects (
    id                   UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id      TEXT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    github_repository_id BIGINT NOT NULL,
    owner                TEXT NOT NULL,
    name                 TEXT NOT NULL,
    created_at           TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (organization_id, github_repository_id)
);

CREATE INDEX IF NOT EXISTS idx_projects_org_owner_name
    ON projects (organization_id, owner, name);


CREATE TABLE IF NOT EXISTS shared_tasks (
    id                UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id   TEXT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    project_id        UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    creator_user_id   TEXT REFERENCES users(id) ON DELETE SET NULL,
    assignee_user_id  TEXT REFERENCES users(id) ON DELETE SET NULL,
    title             TEXT NOT NULL,
    description       TEXT,
    status            task_status NOT NULL DEFAULT 'todo'::task_status,
    version           BIGINT NOT NULL DEFAULT 1,
    shared_at         TIMESTAMPTZ DEFAULT NOW(),
    created_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at        TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_tasks_org_status
    ON shared_tasks (organization_id, status);

CREATE INDEX IF NOT EXISTS idx_tasks_org_assignee
    ON shared_tasks (organization_id, assignee_user_id);

CREATE INDEX IF NOT EXISTS idx_tasks_project
    ON shared_tasks (project_id);

CREATE TABLE IF NOT EXISTS activity (
    seq               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id          UUID NOT NULL DEFAULT gen_random_uuid(),
    organization_id   TEXT NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    assignee_user_id  TEXT REFERENCES users(id) ON DELETE SET NULL,
    event_type        TEXT NOT NULL,
    payload           JSONB NOT NULL,
    created_at        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    UNIQUE (event_id)
);

CREATE INDEX IF NOT EXISTS idx_activity_org_seq
    ON activity (organization_id, seq DESC);

DO $$
BEGIN
    DROP TRIGGER IF EXISTS trg_activity_notify ON activity;
EXCEPTION
    WHEN undefined_object THEN NULL;
END
$$;

DO $$
BEGIN
    DROP FUNCTION IF EXISTS activity_notify();
EXCEPTION
    WHEN undefined_function THEN NULL;
END
$$;

CREATE OR REPLACE FUNCTION activity_notify() RETURNS trigger AS $$
BEGIN
    PERFORM pg_notify(
        'activity',
        json_build_object(
            'seq', NEW.seq,
            'event_id', NEW.event_id,
            'organization_id', NEW.organization_id,
            'event_type', NEW.event_type,
            'created_at', NEW.created_at
        )::text
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER trg_activity_notify
    AFTER INSERT ON activity
    FOR EACH ROW
    EXECUTE FUNCTION activity_notify();
